'use client'

import { useState, useEffect } from 'react'\nimport { ArrowUp, ArrowDown, Clock, Database, Zap, CheckCircle, AlertTriangle, Activity, Loader2 } from 'lucide-react'\n\ninterface MetricCardProps {\n  title: string\n  value: string | number\n  change?: {\n    value: number\n    trend: 'up' | 'down'\n    timeframe: string\n  }\n  status?: 'good' | 'warning' | 'critical'\n  icon: React.ReactNode\n  description: string\n}\n\nfunction MetricCard({ title, value, change, status = 'good', icon, description }: MetricCardProps) {\n  const statusColors = {\n    good: 'text-green-600 bg-green-50 border-green-200',\n    warning: 'text-yellow-600 bg-yellow-50 border-yellow-200',\n    critical: 'text-red-600 bg-red-50 border-red-200'\n  }\n\n  return (\n    <div className={`metric-card border-l-4 ${statusColors[status]}`}>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className={`p-2 rounded-lg ${\n            status === 'good' ? 'bg-green-100' : \n            status === 'warning' ? 'bg-yellow-100' : 'bg-red-100'\n          }`}>\n            {icon}\n          </div>\n          <div>\n            <h3 className=\"text-sm font-medium text-gray-500\">{title}</h3>\n            <p className=\"text-2xl font-bold text-gray-900\">{value}</p>\n          </div>\n        </div>\n        {change && (\n          <div className={`flex items-center space-x-1 text-sm ${\n            change.trend === 'up' ? 'text-green-600' : 'text-red-600'\n          }`}>\n            {change.trend === 'up' ? <ArrowUp size={16} /> : <ArrowDown size={16} />}\n            <span className=\"font-medium\">{Math.abs(change.value)}%</span>\n          </div>\n        )}\n      </div>\n      <p className=\"text-sm text-gray-500 mt-2\">{description}</p>\n      {change && (\n        <p className=\"text-xs text-gray-400 mt-1\">{change.timeframe}</p>\n      )}\n    </div>\n  )\n}\n\nexport default function MetricsGrid() {\n  const [loading, setLoading] = useState<string | null>(null)\n  const [results, setResults] = useState<any>(null)\n  const [showResults, setShowResults] = useState(false)\n  const [realMetrics, setRealMetrics] = useState<any>(null)\n  const [metricsLoading, setMetricsLoading] = useState(true)\n\n  // Fetch real metrics on component mount\n  useEffect(() => {\n    fetchRealMetrics()\n    \n    // Update every 30 seconds\n    const interval = setInterval(fetchRealMetrics, 30000)\n    return () => clearInterval(interval)\n  }, [])\n\n  const fetchRealMetrics = async () => {\n    try {\n      setMetricsLoading(true)\n      \n      const [serviceResponse, systemResponse] = await Promise.allSettled([\n        fetch('/api/service-status'),\n        fetch('/api/system-details')\n      ])\n      \n      let services = []\n      let systemData = null\n      \n      if (serviceResponse.status === 'fulfilled' && serviceResponse.value.ok) {\n        const data = await serviceResponse.value.json()\n        services = data.services || []\n      }\n      \n      if (systemResponse.status === 'fulfilled' && systemResponse.value.ok) {\n        const data = await systemResponse.value.json()\n        systemData = data.data\n      }\n      \n      setRealMetrics({ services, systemData })\n    } catch (error) {\n      console.error('Failed to fetch real metrics:', error)\n    } finally {\n      setMetricsLoading(false)\n    }\n  }\n\n  // Calculate metrics from real data\n  const getMetrics = () => {\n    if (!realMetrics) {\n      return [\n        {\n          title: 'System Status',\n          value: 'Loading...',\n          status: 'warning' as const,\n          icon: <Activity className=\"w-5 h-5 text-gray-600\" />,\n          description: 'Fetching real-time system status'\n        }\n      ]\n    }\n    \n    const { services, systemData } = realMetrics\n    \n    // Database metrics\n    const dbMetrics = systemData?.systemComponents?.find((c: any) => c.title === 'Database Cluster')\n    const dbResponseTime = dbMetrics?.details?.find((d: any) => d.label === 'Query Time')?.value || 'N/A'\n    \n    // OpenAI metrics\n    const openaiMetrics = systemData?.systemComponents?.find((c: any) => c.title === 'OpenAI Services')\n    const openaiLatency = openaiMetrics?.details?.find((d: any) => d.label === 'Average Latency')?.value || 'N/A'\n    \n    // Service availability\n    const operationalServices = services?.filter((s: any) => s.status === 'operational').length || 0\n    const totalServices = services?.length || 0\n    const availability = totalServices > 0 ? ((operationalServices / totalServices) * 100).toFixed(1) : '0.0'\n    \n    return [\n      {\n        title: 'Database Response',\n        value: dbResponseTime,\n        status: dbResponseTime !== 'N/A' && parseInt(dbResponseTime) > 100 ? 'warning' : 'good' as const,\n        icon: <Database className=\"w-5 h-5 text-blue-600\" />,\n        description: 'PostgreSQL query response time'\n      },\n      {\n        title: 'OpenAI Latency', \n        value: openaiLatency,\n        status: openaiLatency !== 'N/A' && parseInt(openaiLatency) > 2000 ? 'warning' : 'good' as const,\n        icon: <Zap className=\"w-5 h-5 text-purple-600\" />,\n        description: 'AI assistant response time'\n      },\n      {\n        title: 'Service Availability',\n        value: `${availability}%`,\n        status: parseFloat(availability) < 100 ? 'warning' : 'good' as const,\n        icon: <CheckCircle className=\"w-5 h-5 text-green-600\" />,\n        description: `${operationalServices}/${totalServices} services operational`\n      },\n      {\n        title: 'System Health',\n        value: systemData?.summary?.overallUptime ? `${systemData.summary.overallUptime}%` : 'N/A',\n        status: systemData?.summary?.overallUptime && parseFloat(systemData.summary.overallUptime) < 95 ? 'warning' : 'good' as const,\n        icon: <Activity className=\"w-5 h-5 text-indigo-600\" />,\n        description: 'Overall system health score'\n      }\n    ]\n  }\n\n  const handleForceHealthCheck = async () => {\n    setLoading('health')\n    setResults(null)\n    try {\n      const response = await fetch('/api/actions/force-health-check', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n      \n      const data = await response.json()\n      setResults({ type: 'health', data })\n      setShowResults(true)\n      \n      // Refresh metrics after health check\n      fetchRealMetrics()\n    } catch (error) {\n      setResults({ \n        type: 'health', \n        data: { \n          success: false, \n          error: 'Failed to perform health check',\n          details: error instanceof Error ? error.message : 'Network error'\n        } \n      })\n      setShowResults(true)\n    } finally {\n      setLoading(null)\n    }\n  }\n\n  const handleTestAssistants = async () => {\n    setLoading('assistants')\n    setResults(null)\n    try {\n      const response = await fetch('/api/actions/test-assistants', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n      \n      const data = await response.json()\n      setResults({ type: 'assistants', data })\n      setShowResults(true)\n    } catch (error) {\n      setResults({ \n        type: 'assistants', \n        data: { \n          success: false, \n          error: 'Failed to test assistants',\n          details: error instanceof Error ? error.message : 'Network error'\n        } \n      })\n      setShowResults(true)\n    } finally {\n      setLoading(null)\n    }\n  }\n\n  const handleViewAlerts = async () => {\n    setLoading('alerts')\n    setResults(null)\n    try {\n      const response = await fetch('/api/actions/view-alerts?limit=10')\n      const data = await response.json()\n      setResults({ type: 'alerts', data })\n      setShowResults(true)\n    } catch (error) {\n      setResults({ \n        type: 'alerts', \n        data: { \n          success: false, \n          error: 'Failed to fetch alerts',\n          details: error instanceof Error ? error.message : 'Network error'\n        } \n      })\n      setShowResults(true)\n    } finally {\n      setLoading(null)\n    }\n  }\n\n  const handleTestTelegram = async () => {\n    setLoading('telegram')\n    setResults(null)\n    try {\n      const response = await fetch('/api/telegram', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ action: 'test' })\n      })\n      \n      const data = await response.json()\n      setResults({ type: 'telegram', data })\n      setShowResults(true)\n    } catch (error) {\n      setResults({ \n        type: 'telegram', \n        data: { \n          success: false, \n          error: 'Failed to test Telegram bot',\n          details: error instanceof Error ? error.message : 'Network error'\n        } \n      })\n      setShowResults(true)\n    } finally {\n      setLoading(null)\n    }\n  }\n\n  const formatResults = () => {\n    if (!results) return null\n\n    const { type, data } = results\n\n    if (!data.success) {\n      return (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n          <h4 className=\"font-medium text-red-900 mb-2\">❌ {data.error}</h4>\n          <p className=\"text-sm text-red-700\">{data.details}</p>\n        </div>\n      )\n    }\n\n    switch (type) {\n      case 'health':\n        return (\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n            <h4 className=\"font-medium text-green-900 mb-3\">✅ Health Check Results</h4>\n            <div className=\"space-y-2\">\n              <p className=\"text-sm\"><strong>Health Score:</strong> {data.summary.healthScore}</p>\n              <p className=\"text-sm\"><strong>Processing Time:</strong> {data.processingTime}</p>\n              <p className=\"text-sm\"><strong>Services:</strong> {data.summary.operationalServices}/{data.summary.totalServices} operational</p>\n              {data.summary.majorIssues > 0 && (\n                <p className=\"text-sm text-red-600\"><strong>Major Issues:</strong> {data.summary.majorIssues}</p>\n              )}\n            </div>\n          </div>\n        )\n\n      case 'assistants':\n        return (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <h4 className=\"font-medium text-blue-900 mb-3\">🤖 Assistant Test Results</h4>\n            <div className=\"space-y-2\">\n              <p className=\"text-sm\"><strong>Overall Status:</strong> {data.summary.overallStatus}</p>\n              <p className=\"text-sm\"><strong>Processing Time:</strong> {data.processingTime}</p>\n              <p className=\"text-sm\"><strong>Tests:</strong> {data.summary.passedTests}/{data.summary.totalTests} passed</p>\n              <div className=\"mt-3 space-y-1\">\n                {data.results.map((result: any, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between text-xs\">\n                    <span>{result.name}</span>\n                    <span className={`px-2 py-1 rounded ${\n                      result.status === 'operational' ? 'bg-green-100 text-green-700' :\n                      result.status === 'degraded' ? 'bg-yellow-100 text-yellow-700' :\n                      'bg-red-100 text-red-700'\n                    }`}>\n                      {result.status}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        )\n\n      case 'alerts':\n        return (\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n            <h4 className=\"font-medium text-yellow-900 mb-3\">🚨 Active Alerts</h4>\n            <div className=\"space-y-2\">\n              <p className=\"text-sm\"><strong>Total Active:</strong> {data.summary.totalActiveAlerts}</p>\n              <p className=\"text-sm\"><strong>Critical:</strong> {data.summary.criticalAlerts} | <strong>Errors:</strong> {data.summary.errorAlerts} | <strong>Warnings:</strong> {data.summary.warningAlerts}</p>\n              <p className=\"text-sm\"><strong>Alert Rules:</strong> {data.summary.enabledRules}/{data.summary.totalRules} enabled</p>\n              \n              {data.alerts.length > 0 && (\n                <div className=\"mt-3 space-y-1\">\n                  <p className=\"text-xs font-medium text-gray-700\">Recent Alerts:</p>\n                  {data.alerts.slice(0, 3).map((alert: any, index: number) => (\n                    <div key={index} className=\"text-xs bg-white p-2 rounded border\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"font-medium\">{alert.title}</span>\n                        <span className={`px-1 rounded ${\n                          alert.severity === 'critical' ? 'bg-red-100 text-red-700' :\n                          alert.severity === 'error' ? 'bg-orange-100 text-orange-700' :\n                          alert.severity === 'warning' ? 'bg-yellow-100 text-yellow-700' :\n                          'bg-blue-100 text-blue-700'\n                        }`}>\n                          {alert.severity}\n                        </span>\n                      </div>\n                      <p className=\"text-gray-600 mt-1\">{alert.description}</p>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        )\n\n      case 'telegram':\n        return (\n          <div className={`${data.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'} border rounded-lg p-4`}>\n            <h4 className={`font-medium mb-3 ${data.success ? 'text-green-900' : 'text-red-900'}`}>\n              {data.success ? '✅ Telegram Test' : '❌ Telegram Test Failed'}\n            </h4>\n            <div className=\"space-y-2\">\n              <p className=\"text-sm\"><strong>Status:</strong> {data.success ? 'Success' : 'Failed'}</p>\n              <p className=\"text-sm\"><strong>Processing Time:</strong> {data.processingTime}</p>\n              {data.message && <p className=\"text-sm\"><strong>Message:</strong> {data.message}</p>}\n              {data.status && (\n                <div className=\"mt-3\">\n                  <p className=\"text-xs font-medium text-gray-700\">Configuration Status:</p>\n                  <div className=\"text-xs bg-white p-2 rounded border mt-1\">\n                    <p><strong>Configured:</strong> {data.status.configured ? 'Yes' : 'No'}</p>\n                    <p><strong>Bot Token:</strong> {data.status.botToken ? 'Set' : 'Missing'}</p>\n                    <p><strong>Chat ID:</strong> {data.status.chatId ? 'Set' : 'Missing'}</p>\n                  </div>\n                </div>\n              )}\n              {!data.success && data.details && (\n                <p className=\"text-sm text-red-600\"><strong>Error:</strong> {data.details}</p>\n              )}\n            </div>\n          </div>\n        )\n\n      default:\n        return null\n    }\n  }\n\n  const metrics = getMetrics()\n\n  return (\n    <div>\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">Real-time Metrics</h3>\n            <p className=\"text-sm text-gray-600\">\n              Live performance indicators \n              {metricsLoading && <span className=\"text-yellow-600\">• Updating...</span>}\n            </p>\n          </div>\n          <button \n            onClick={fetchRealMetrics}\n            disabled={metricsLoading}\n            className=\"text-sm text-blue-600 hover:text-blue-700 disabled:opacity-50\"\n          >\n            {metricsLoading ? 'Updating...' : 'Refresh'}\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {metrics.map((metric, index) => (\n          <MetricCard key={index} {...metric} />\n        ))}\n      </div>\n      \n      {/* Quick Actions */}\n      <div className=\"mt-8 bg-gray-50 rounded-lg p-6 border border-gray-200\">\n        <h4 className=\"font-medium text-gray-900 mb-4\">Quick Actions</h4>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <button \n            onClick={handleForceHealthCheck}\n            disabled={loading === 'health'}\n            className=\"flex items-center justify-center space-x-2 py-2 px-4 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {loading === 'health' ? (\n              <Loader2 className=\"w-4 h-4 text-gray-600 animate-spin\" />\n            ) : (\n              <Activity className=\"w-4 h-4 text-gray-600\" />\n            )}\n            <span className=\"text-sm font-medium text-gray-700\">\n              {loading === 'health' ? 'Checking...' : 'Force Health Check'}\n            </span>\n          </button>\n          \n          <button \n            onClick={handleTestAssistants}\n            disabled={loading === 'assistants'}\n            className=\"flex items-center justify-center space-x-2 py-2 px-4 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {loading === 'assistants' ? (\n              <Loader2 className=\"w-4 h-4 text-gray-600 animate-spin\" />\n            ) : (\n              <Zap className=\"w-4 h-4 text-gray-600\" />\n            )}\n            <span className=\"text-sm font-medium text-gray-700\">\n              {loading === 'assistants' ? 'Testing...' : 'Test Assistants'}\n            </span>\n          </button>\n          \n          <button \n            onClick={handleViewAlerts}\n            disabled={loading === 'alerts'}\n            className=\"flex items-center justify-center space-x-2 py-2 px-4 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {loading === 'alerts' ? (\n              <Loader2 className=\"w-4 h-4 text-gray-600 animate-spin\" />\n            ) : (\n              <AlertTriangle className=\"w-4 h-4 text-gray-600\" />\n            )}\n            <span className=\"text-sm font-medium text-gray-700\">\n              {loading === 'alerts' ? 'Loading...' : 'View Alerts'}\n            </span>\n          </button>\n          \n          <button \n            onClick={handleTestTelegram}\n            disabled={loading === 'telegram'}\n            className=\"flex items-center justify-center space-x-2 py-2 px-4 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            {loading === 'telegram' ? (\n              <Loader2 className=\"w-4 h-4 text-blue-600 animate-spin\" />\n            ) : (\n              <span className=\"text-blue-600\">📱</span>\n            )}\n            <span className=\"text-sm font-medium text-gray-700\">\n              {loading === 'telegram' ? 'Testing...' : 'Test Telegram'}\n            </span>\n          </button>\n        </div>\n      </div>\n\n      {/* Results Display */}\n      {showResults && results && (\n        <div className=\"mt-6\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h4 className=\"font-medium text-gray-900\">Action Results</h4>\n            <button \n              onClick={() => setShowResults(false)}\n              className=\"text-sm text-gray-500 hover:text-gray-700\"\n            >\n              ✕ Close\n            </button>\n          </div>\n          {formatResults()}\n        </div>\n      )}\n    </div>\n  )\n}
