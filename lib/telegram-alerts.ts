// CopyFlow Telegram Alert System
// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–¥—ñ—ó –≤ —Å–∏—Å—Ç–µ–º—ñ

export interface TelegramAlertConfig {
  botToken: string
  chatId: string
  enabled: boolean
}

export interface AlertMessage {
  title: string
  severity: 'info' | 'warning' | 'error' | 'critical'
  service: string
  description: string
  timestamp: Date
  metadata?: any
}

// üé® EMOJI –î–õ–Ø –†–Ü–ó–ù–ò–• –¢–ò–ü–Ü–í ALERTS
const ALERT_EMOJIS = {
  info: '‚ÑπÔ∏è',
  warning: '‚ö†Ô∏è', 
  error: '‚ùå',
  critical: 'üö®'
} as const

const SEVERITY_COLORS = {
  info: 'üíô',
  warning: 'üíõ',
  error: 'üß°', 
  critical: '‚ù§Ô∏è'
} as const

export class TelegramAlertsService {
  private config: TelegramAlertConfig
  
  constructor() {
    this.config = {
      botToken: process.env.TELEGRAM_BOT_TOKEN || '',
      chatId: process.env.TELEGRAM_CHAT_ID || '',
      enabled: !!(process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID)
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ alert –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
   */
  async sendAlert(alert: AlertMessage): Promise<boolean> {
    if (!this.config.enabled) {
      console.log('üì± Telegram alerts disabled - missing BOT_TOKEN or CHAT_ID')
      return false
    }

    try {
      const message = this.formatAlertMessage(alert)
      
      const response = await fetch(`https://api.telegram.org/bot${this.config.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.config.chatId,
          text: message,
          parse_mode: 'HTML',
          disable_web_page_preview: true
        })
      })

      if (!response.ok) {
        const errorData = await response.json()
        console.error('‚ùå Telegram API error:', errorData)
        return false
      }

      console.log('‚úÖ Telegram alert sent successfully')
      return true

    } catch (error) {
      console.error('üö® Failed to send Telegram alert:', error)
      return false
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
   */
  async sendTestMessage(): Promise<boolean> {
    const testAlert: AlertMessage = {
      title: 'Test Alert',
      severity: 'info',
      service: 'telegram-test',
      description: '–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Telegram bot –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó',
      timestamp: new Date(),
      metadata: {
        test: true,
        dashboardVersion: '1.0.0'
      }
    }

    return await this.sendAlert(testAlert)
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–≤—ñ—Ç –ø—Ä–æ —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏
   */
  async sendHealthReport(healthData: any): Promise<boolean> {
    if (!this.config.enabled) return false

    try {
      const message = this.formatHealthReport(healthData)
      
      const response = await fetch(`https://api.telegram.org/bot${this.config.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.config.chatId,
          text: message,
          parse_mode: 'HTML'
        })
      })

      return response.ok

    } catch (error) {
      console.error('Failed to send health report:', error)
      return false
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è alert –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram
   */
  private formatAlertMessage(alert: AlertMessage): string {
    const emoji = ALERT_EMOJIS[alert.severity]
    const colorEmoji = SEVERITY_COLORS[alert.severity]
    const time = alert.timestamp.toLocaleString('uk-UA', { 
      timeZone: 'Europe/Kiev',
      day: '2-digit',
      month: '2-digit', 
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })

    let message = `${emoji} <b>CopyFlow Alert</b> ${colorEmoji}\n\n`
    message += `üè∑Ô∏è <b>–°–µ—Ä–≤—ñ—Å:</b> ${alert.service}\n`
    message += `üìã <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> ${alert.title}\n`
    message += `üìù <b>–î–µ—Ç–∞–ª—ñ:</b> ${alert.description}\n`
    message += `‚è∞ <b>–ß–∞—Å:</b> ${time}\n`
    message += `üéØ <b>–†—ñ–≤–µ–Ω—å:</b> ${alert.severity.toUpperCase()}\n`

    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ —è–∫—â–æ —î
    if (alert.metadata) {
      message += `\nüìä <b>–î–∞–Ω—ñ:</b>\n`
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ –º–µ—Ç—Ä–∏–∫–∏
      if (alert.metadata.metric && alert.metadata.value) {
        message += `‚Ä¢ ${alert.metadata.metric}: <code>${alert.metadata.value}</code>\n`
      }
      
      if (alert.metadata.threshold) {
        message += `‚Ä¢ –ü–æ—Ä—ñ–≥: <code>${alert.metadata.threshold}</code>\n`
      }
      
      if (alert.metadata.responseTime) {
        message += `‚Ä¢ –ß–∞—Å –≤—ñ–¥–≥—É–∫—É: <code>${alert.metadata.responseTime}ms</code>\n`
      }

      if (alert.metadata.errorMessage) {
        message += `‚Ä¢ –ü–æ–º–∏–ª–∫–∞: <code>${alert.metadata.errorMessage}</code>\n`
      }
    }

    message += `\nüîó <a href="${process.env.RAILWAY_STATIC_URL || 'http://localhost:3001'}">–í—ñ–¥–∫—Ä–∏—Ç–∏ Dashboard</a>`

    return message
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É –ø—Ä–æ —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏
   */
  private formatHealthReport(healthData: any): string {
    const time = new Date().toLocaleString('uk-UA', { 
      timeZone: 'Europe/Kiev',
      day: '2-digit',
      month: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    })

    let message = `üìä <b>CopyFlow Health Report</b> üìä\n\n`
    message += `‚è∞ <b>–ß–∞—Å:</b> ${time}\n`
    message += `üéØ <b>Health Score:</b> <code>${healthData.healthScore || 'N/A'}</code>\n\n`

    // –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤
    if (healthData.services) {
      message += `üîß <b>–°–µ—Ä–≤—ñ—Å–∏:</b>\n`
      healthData.services.forEach((service: any) => {
        const statusEmoji = service.status === 'operational' ? '‚úÖ' : 
                           service.status === 'degraded' ? '‚ö†Ô∏è' : '‚ùå'
        message += `${statusEmoji} ${service.service}: ${service.status}\n`
      })
      message += `\n`
    }

    // –ö–ª—é—á–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
    if (healthData.metrics) {
      message += `üìà <b>–ú–µ—Ç—Ä–∏–∫–∏:</b>\n`
      if (healthData.metrics.averageResponseTime) {
        message += `‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–≥—É–∫—É: <code>${healthData.metrics.averageResponseTime}ms</code>\n`
      }
      if (healthData.metrics.successRate) {
        message += `‚úÖ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: <code>${healthData.metrics.successRate}%</code>\n`
      }
      if (healthData.metrics.activeUsers) {
        message += `üë• –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: <code>${healthData.metrics.activeUsers}</code>\n`
      }
    }

    message += `\nüîó <a href="${process.env.RAILWAY_STATIC_URL || 'http://localhost:3001'}">–î–µ—Ç–∞–ª—å–Ω–∏–π Dashboard</a>`

    return message
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ Telegram
   */
  isConfigured(): boolean {
    return this.config.enabled
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
   */
  getStatus(): { configured: boolean, botToken: boolean, chatId: boolean } {
    return {
      configured: this.config.enabled,
      botToken: !!this.config.botToken,
      chatId: !!this.config.chatId
    }
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç singleton instance
export const telegramAlerts = new TelegramAlertsService()

// Helper —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è alert
export async function sendTelegramAlert(
  title: string,
  description: string,
  severity: AlertMessage['severity'] = 'warning',
  service: string = 'system',
  metadata?: any
): Promise<boolean> {
  const alert: AlertMessage = {
    title,
    description,
    severity,
    service,
    timestamp: new Date(),
    metadata
  }

  return await telegramAlerts.sendAlert(alert)
}
