// –î–û–î–ê–¢–ö–û–í–ò–ô –ö–û–î - –¢–Ü–õ–¨–ö–ò –Ø–ö–©–û –ü–û–¢–†–Ü–ë–ù–ê –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–Ü–°–¢–¨\n// –¶–µ–π —Ñ–∞–π–ª –ù–ï –û–ë–û–í'–Ø–ó–ö–û–í–ò–ô –¥–ª—è –±–∞–∑–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ alerts\n\nimport { NextResponse } from 'next/server'\nimport { telegramAlerts, sendTelegramAlert } from '@/lib/telegram-alerts'\nimport { getSystemHealth } from '@/lib/monitoring'\n\n// Webhook endpoint –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ Telegram\nexport async function POST(request: Request) {\n  try {\n    const update = await request.json()\n    \n    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n    if (!update.message || !update.message.text) {\n      return NextResponse.json({ ok: true })\n    }\n\n    const chatId = update.message.chat.id\n    const text = update.message.text\n    const userId = update.message.from.id\n\n    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n    if (chatId.toString() !== process.env.TELEGRAM_CHAT_ID) {\n      return NextResponse.json({ ok: true }) // –Ü–≥–Ω–æ—Ä—É—î–º–æ\n    }\n\n    // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥\n    switch (text) {\n      case '/start':\n        await sendReply(chatId, `üëã –í—ñ—Ç–∞—é! –¶–µ CopyFlow Health Monitor Bot.\\n\\n–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\\n/status - –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏\\n/health - –¥–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞\\n/alerts - –∞–∫—Ç–∏–≤–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è`)\n        break\n\n      case '/status':\n        await handleStatusCommand(chatId)\n        break\n\n      case '/health':\n        await handleHealthCommand(chatId)\n        break\n\n      case '/alerts':\n        await handleAlertsCommand(chatId)\n        break\n\n      case '/help':\n        await sendReply(chatId, `ü§ñ CopyFlow Bot Commands:\\n\\n/status - –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ç—É—Å\\n/health - –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞\\n/alerts - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö alerts\\n/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞`)\n        break\n\n      default:\n        // –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞\n        if (text.startsWith('/')) {\n          await sendReply(chatId, `‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: ${text}\\n\\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥`)\n        }\n        break\n    }\n\n    return NextResponse.json({ ok: true })\n\n  } catch (error) {\n    console.error('Telegram webhook error:', error)\n    return NextResponse.json({ ok: true }) // –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ ok\n  }\n}\n\n// –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É\nasync function sendReply(chatId: number, text: string) {\n  try {\n    const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        chat_id: chatId,\n        text: text,\n        parse_mode: 'HTML'\n      })\n    })\n    \n    return response.ok\n  } catch (error) {\n    console.error('Failed to send reply:', error)\n    return false\n  }\n}\n\n// –ö–æ–º–∞–Ω–¥–∞ /status\nasync function handleStatusCommand(chatId: number) {\n  try {\n    const healthData = await getSystemHealth()\n    \n    const operationalServices = healthData.filter(s => s.status === 'operational').length\n    const totalServices = healthData.length\n    const healthScore = Math.round((operationalServices / totalServices) * 100)\n    \n    let message = `üìä <b>CopyFlow Status</b>\\n\\n`\n    message += `üéØ Health Score: <code>${healthScore}%</code>\\n`\n    message += `‚úÖ Operational: <code>${operationalServices}/${totalServices}</code> services\\n\\n`\n    \n    message += `üîß <b>Services:</b>\\n`\n    healthData.forEach(service => {\n      const emoji = service.status === 'operational' ? '‚úÖ' : \n                   service.status === 'degraded' ? '‚ö†Ô∏è' : '‚ùå'\n      message += `${emoji} ${service.service}\\n`\n    })\n    \n    await sendReply(chatId, message)\n    \n  } catch (error) {\n    await sendReply(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: ${error instanceof Error ? error.message : 'Unknown error'}`)\n  }\n}\n\n// –ö–æ–º–∞–Ω–¥–∞ /health\nasync function handleHealthCommand(chatId: number) {\n  await sendReply(chatId, `üîç –ó–∞–ø—É—Å–∫–∞—é –¥–µ—Ç–∞–ª—å–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å–∏—Å—Ç–µ–º–∏...`)\n  \n  try {\n    const healthData = await getSystemHealth()\n    \n    let message = `üî¨ <b>–î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è</b>\\n\\n`\n    \n    healthData.forEach(service => {\n      const statusEmoji = service.status === 'operational' ? '‚úÖ' : \n                         service.status === 'degraded' ? '‚ö†Ô∏è' : '‚ùå'\n      \n      message += `${statusEmoji} <b>${service.service}</b>\\n`\n      message += `   Status: ${service.status}\\n`\n      \n      if (service.responseTime) {\n        message += `   Response: ${service.responseTime}ms\\n`\n      }\n      \n      if (service.metadata?.error) {\n        message += `   Error: ${service.metadata.error}\\n`\n      }\n      \n      message += `\\n`\n    })\n    \n    await sendReply(chatId, message)\n    \n  } catch (error) {\n    await sendReply(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ health check: ${error instanceof Error ? error.message : 'Unknown error'}`)\n  }\n}\n\n// –ö–æ–º–∞–Ω–¥–∞ /alerts\nasync function handleAlertsCommand(chatId: number) {\n  try {\n    // –¢—É—Ç –º–æ–∂–Ω–∞ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –¥–æ –±–∞–∑–∏ alerts\n    await sendReply(chatId, `üö® <b>Active Alerts</b>\\n\\n–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å\\n\\nüí° Alerts –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ–±–ª–µ–º`)\n    \n  } catch (error) {\n    await sendReply(chatId, `‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è alerts: ${error instanceof Error ? error.message : 'Unknown error'}`)\n  }\n}\n\n// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑)\nexport async function setupWebhook() {\n  const webhookUrl = `${process.env.RAILWAY_STATIC_URL}/api/telegram/webhook`\n  \n  try {\n    const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/setWebhook`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        url: webhookUrl\n      })\n    })\n    \n    const result = await response.json()\n    console.log('Webhook setup result:', result)\n    \n    return result.ok\n  } catch (error) {\n    console.error('Failed to setup webhook:', error)\n    return false\n  }\n}\n